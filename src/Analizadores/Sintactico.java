
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Mar 20 12:41:44 CST 2017
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;

import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Mar 20 12:41:44 CST 2017
  */
public class Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\036\000\002\002\004\000\002\002\005\000\002\003" +
    "\007\000\002\003\004\000\002\006\017\000\002\006\014" +
    "\000\002\007\022\000\002\007\004\000\002\007\002\000" +
    "\002\010\007\000\002\010\002\000\002\011\004\000\002" +
    "\011\002\000\002\012\017\000\002\005\007\000\002\004" +
    "\003\000\002\014\005\000\002\014\005\000\002\014\004" +
    "\000\002\014\004\000\002\014\004\000\002\014\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\031\000\034\004\013\006\015\012\021\013\006\014" +
    "\007\015\012\016\005\017\020\020\017\021\010\022\023" +
    "\023\016\025\011\001\002\000\036\002\uffec\004\uffec\006" +
    "\uffec\012\uffec\013\uffec\014\uffec\015\uffec\016\uffec\017\uffec" +
    "\020\uffec\021\uffec\022\uffec\023\uffec\025\uffec\001\002\000" +
    "\034\004\013\006\015\012\021\013\006\014\007\015\012" +
    "\016\005\017\020\020\017\021\010\022\023\023\016\025" +
    "\011\001\002\000\034\004\013\006\015\012\021\013\006" +
    "\014\007\015\012\016\005\017\020\020\017\021\010\022" +
    "\023\023\016\025\011\001\002\000\034\004\013\006\015" +
    "\012\021\013\006\014\007\015\012\016\005\017\020\020" +
    "\017\021\010\022\023\023\016\025\011\001\002\000\036" +
    "\002\uffe7\004\uffe7\006\uffe7\012\uffe7\013\uffe7\014\uffe7\015" +
    "\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7" +
    "\025\uffe7\001\002\000\036\002\uffe5\004\uffe5\006\uffe5\012" +
    "\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5" +
    "\021\uffe5\022\uffe5\023\uffe5\025\uffe5\001\002\000\034\004" +
    "\013\006\015\012\021\013\006\014\007\015\012\016\005" +
    "\017\020\020\017\021\010\022\023\023\016\025\011\001" +
    "\002\000\036\002\uffeb\004\uffeb\006\uffeb\012\uffeb\013\uffeb" +
    "\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022" +
    "\uffeb\023\uffeb\025\uffeb\001\002\000\004\002\026\001\002" +
    "\000\036\002\uffea\004\uffea\006\uffea\012\uffea\013\uffea\014" +
    "\uffea\015\uffea\016\uffea\017\uffea\020\uffea\021\uffea\022\uffea" +
    "\023\uffea\025\uffea\001\002\000\036\002\uffe4\004\uffe4\006" +
    "\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4" +
    "\020\uffe4\021\uffe4\022\uffe4\023\uffe4\025\uffe4\001\002\000" +
    "\036\002\uffe6\004\uffe6\006\uffe6\012\uffe6\013\uffe6\014\uffe6" +
    "\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023" +
    "\uffe6\025\uffe6\001\002\000\036\002\uffe9\004\uffe9\006\uffe9" +
    "\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020" +
    "\uffe9\021\uffe9\022\uffe9\023\uffe9\025\uffe9\001\002\000\034" +
    "\004\013\006\015\012\021\013\006\014\007\015\012\016" +
    "\005\017\020\020\017\021\010\022\023\023\016\025\011" +
    "\001\002\000\004\002\ufff2\001\002\000\036\002\uffe8\004" +
    "\uffe8\006\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8" +
    "\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\025\uffe8\001" +
    "\002\000\034\004\013\006\015\012\021\013\006\014\007" +
    "\015\012\016\005\017\020\020\017\021\010\022\023\023" +
    "\016\025\011\001\002\000\036\002\ufff0\004\ufff0\006\ufff0" +
    "\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020" +
    "\ufff0\021\ufff0\022\ufff0\023\ufff0\025\ufff0\001\002\000\004" +
    "\002\001\001\002\000\036\002\uffed\004\uffed\006\uffed\012" +
    "\uffed\013\uffed\014\uffed\015\uffed\016\uffed\017\uffed\020\uffed" +
    "\021\uffed\022\uffed\023\uffed\025\uffed\001\002\000\036\002" +
    "\uffef\004\uffef\006\uffef\012\uffef\013\uffef\014\uffef\015\uffef" +
    "\016\uffef\017\uffef\020\uffef\021\uffef\022\uffef\023\uffef\025" +
    "\uffef\001\002\000\034\004\013\006\015\012\021\013\006" +
    "\014\007\015\012\016\005\017\020\020\017\021\010\022" +
    "\023\023\016\025\011\001\002\000\036\002\ufff1\004\ufff1" +
    "\006\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\017" +
    "\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\025\ufff1\001\002" +
    "\000\036\002\uffee\004\uffee\006\uffee\012\uffee\013\uffee\014" +
    "\uffee\015\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022\uffee" +
    "\023\uffee\025\uffee\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\031\000\010\004\013\013\003\014\021\001\001\000" +
    "\002\001\001\000\006\013\003\014\032\001\001\000\006" +
    "\013\003\014\030\001\001\000\006\013\003\014\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\013\003" +
    "\014\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\003\014\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\003\014\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\013\003\014\031\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**Metodo al que se llama automáticamente ante algún error sintactico.*/
    public void syntax_error(Symbol s){
        System.out.println("Error en la Línea " + (s.right+1) +" Columna "+s.left+ ". Identificador "
        +s.value + " no reconocido." );
    }

    /**Metodo al que se llama en el momento en que ya no es posible una recuperación de
    errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error en la Línea " + (s.right+1)+ " Columna "+s.left+". Identificador " +
        s.value + " no reconocido.");

   // Metodos graph =new Metodos();
//ArrayList<Nodo> listaR=new ArrayList<Nodo>();
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {


	//AUN PENDIENTE
	public String salida="";
        

  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // VALOR ::= Todo 
            {
              Object RESULT =null;
		int todleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int todright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object tod = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = tod.toString(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VALOR ::= Cadena 
            {
              Object RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object cad = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = cad.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VALOR ::= C_simple 
            {
              Object RESULT =null;
		int csimpleleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int csimpleright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object csimple = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = csimple.toString(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VALOR ::= C_doble 
            {
              Object RESULT =null;
		int cdobleleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cdobleright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object cdoble = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = cdoble.toString(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VALOR ::= Tabu 
            {
              Object RESULT =null;
		int tabulleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tabulright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object tabul = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = tabul.toString(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VALOR ::= Salto 
            {
              Object RESULT =null;
		int salleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int salright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object sal = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = sal.toString(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VALOR ::= Caracter 
            {
              Object RESULT =null;
		int carleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int carright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object car = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = car.toString(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VALOR ::= Letra 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = id.toString(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // E ::= VALOR 
            {
              Object RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int resright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object res = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = res.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // E ::= Uno_Mas E 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT ="("+n1.toString()+"+"+")_"+Variables.contador();Variables.graph.hacerGrafo(n1.toString(), "z", "Mas");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // E ::= Uno_Cero E 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT ="("+n1.toString()+"?"+")_"+Variables.contador();Variables.graph.hacerGrafo(n1.toString(), "z", "Interrog");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // E ::= Cero_Mas E 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = "("+n1.toString()+"*"+")_"+Variables.contador();Variables.graph.hacerGrafo(n1.toString(), "z", "Aster");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // E ::= Disy E E 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = "("+n1.toString()+"|"+n2.toString()+")_"+Variables.contador();Variables.graph.hacerGrafo(n1.toString(), n2.toString(), "Or");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // E ::= Conc E E 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = "("+n1.toString()+"."+n2.toString()+")_"+Variables.contador();Variables.graph.hacerGrafo(n1.toString(), n2.toString(), "And");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ER ::= E 
            {
              Object RESULT =null;
		int finleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int finright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object fin = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		System.out.println(fin.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ER",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DEF_CONJUN ::= Conj DosPt Identificador Flecha P_Coma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEF_CONJUN",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // RESERVADA ::= Cadena Flecha Retorno O_par Cadena Coma Text Coma Row Coma Col C_par P_Coma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RESERVADA",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LISTA_RESERVA ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_RESERVA",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LISTA_RESERVA ::= RESERVADA LISTA_RESERVA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_RESERVA",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // P_RESERVA ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("P_RESERVA",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // P_RESERVA ::= Flecha R_reserv O_Bra LISTA_RESERVA C_Bra 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("P_RESERVA",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CUERPO_ARCHIV_P ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_ARCHIV_P",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CUERPO_ARCHIV_P ::= DEF_CONJUN CUERPO_ARCHIV_P 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_ARCHIV_P",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CUERPO_ARCHIV_P ::= Identificador Flecha ER Retorno O_par Cadena Coma Text Coma Row Coma Col C_par P_RESERVA P_Coma CUERPO_ARCHIV_P 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_ARCHIV_P",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-15)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // METODOS ::= Err O_par Text Coma Row Coma Col C_par P_Coma CUERPO_ARCHIV_P 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOS",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // METODOS ::= Retorno O_par Cadena Coma Text Coma Row Coma Col C_par P_RESERVA P_Coma CUERPO_ARCHIV 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOS",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CUERPO_ARCHIV ::= DEF_CONJUN CUERPO_ARCHIV 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_ARCHIV",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CUERPO_ARCHIV ::= Identificador Flecha ER Flecha METODOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_ARCHIV",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Doble_por CUERPO_ARCHIV Doble_por 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ER EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

